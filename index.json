{"project": "func_adl", "project_url": "http://project-homepage.org/", "show_commit_url": "#", "hash_length": 8, "revision_to_hash": {"20": "292bb8705e2fd243d4ce8f596f7da3a0d4db2e91", "23": "fd5c37ab541d1e00dd403b0ae546ca088b215f89", "25": "abeb472afb979d5cd44ad0cfeb3a04c916e5e98e", "27": "6429a5f7ec9db6e884295f3442b888b6e6ef665d", "31": "06b5f9965f17413aec64287bc67c18e81faa65c0", "35": "da8bb83a7d1a968a2eb5418ba680d990e8600ca1", "39": "2bfb5df639b16e0334bebdef7afb984f4169547b", "48": "db598547ac87bda44b759181e56d82a0f7f97602", "61": "2777a3f569a581db3b2af8c249f2b499cf7c4dfb", "74": "85ed7cdd480123bc7b43ddff59e9a69913535c28", "110": "8b77755ae96fed1436f9d8d5eaa6dece72468a08", "144": "6c62676ad70fc682b0d34a79ff06a3ee33cf3102", "148": "6c7d18173df93db0c097ef5c54871d241024b88e", "157": "2c71ec09c42b8ba16d6be81d322155a2687dee89", "162": "9f3333a964d0bcbfe40b19b73e44f8ce9e3ba3d1", "171": "c9f35e0f9d42bd80a5c9c021cea4eef80e8469aa", "182": "67e87036e64e1d6686628b1177d737bf8410aaef", "186": "2325ea9abea2f263b701642f9a202304788702f7", "192": "9ff7ae1c0f82dcc6252ecf4449d03d8738192540", "194": "1552a5f9d82cffb19738f80edce15bd96acc7b93", "199": "357b76b66185c2ac0d131592f210fb4e4a2c9224", "206": "3dfdcd5eeeacf5f26ee541fd697788f56ecba5bb", "211": "9e235d4bf32f4b0bc66c60b1412f391248c34546", "224": "8faaed9431f6911b162d06ab14bb11108897a325", "229": "97b8f5728087b951d89ee32ac23b0cfebed2b454", "234": "383ab45a605f73f5eaadcf9ba8699061575a713b", "236": "ac39e6dfa516559c2578040bb856fd9dbe647bdc", "240": "2f8226776b0f8128b072b2291b45f0f1f48a3bd9", "254": "ffd646907e706534b44285718cd4553e29acfe7d", "256": "61b35593b4512dfaf3a75054aa13ffe2fbc602b6"}, "revision_to_date": {"20": 1579989448000, "23": 1579992261000, "25": 1579995119000, "27": 1579995983000, "31": 1580203320000, "35": 1580738213000, "39": 1581332241000, "48": 1581629264000, "61": 1585760814000, "74": 1595597774000, "110": 1606326528000, "144": 1607536449000, "148": 1607539269000, "157": 1611269648000, "162": 1611338061000, "171": 1620394363000, "182": 1625305069000, "186": 1625744613000, "192": 1625823967000, "194": 1625824610000, "199": 1625825683000, "206": 1630702134000, "211": 1633023257000, "224": 1634002401000, "229": 1634301693000, "234": 1634567082000, "236": 1639137508000, "240": 1647285326000, "254": 1647439972000, "256": 1651186153000}, "params": {"arch": ["x86_64"], "cpu": ["Intel(R) Xeon(R) Gold 6348 CPU @ 2.60GHz"], "machine": ["FlatIron"], "num_cpu": ["112"], "os": ["Linux 4.18.0-358.el8.x86_64"], "ram": ["527526844"], "python": ["3.8"], "branch": ["master"]}, "graph_param_list": [{"arch": "x86_64", "cpu": "Intel(R) Xeon(R) Gold 6348 CPU @ 2.60GHz", "machine": "FlatIron", "num_cpu": "112", "os": "Linux 4.18.0-358.el8.x86_64", "ram": "527526844", "python": "3.8", "branch": "master"}], "benchmarks": {"Q1_uproot.Q1Suite.peakmem_met_two_jets_over_40": {"code": "class Q1Suite:\n    def peakmem_met_two_jets_over_40(self):\n        filtered_missing_ET_4 = self.ds.Where(lambda event: event.Jet_pt.Where(lambda pT: pT > 40).Count() >= 2)\\\n                          .Select(lambda event: event.MET_pt).value()\n\n    def setup(self):\n        self.ds = UprootDataset('https://raw.githubusercontent.com/masonproffitt/func-adl-demo/master/Run2012B_SingleMu_10000.root', 'Events')", "name": "Q1_uproot.Q1Suite.peakmem_met_two_jets_over_40", "param_names": [], "params": [], "timeout": 3600, "type": "peakmemory", "unit": "bytes", "version": "6e74cb0487d856c82cb499b886c2da8ec1fa77c09716df3c5108660e86d51d0c"}, "Q1_uproot.Q1Suite.peakmem_met_two_jets_under_1": {"code": "class Q1Suite:\n    def peakmem_met_two_jets_under_1(self):\n        filtered_jet_pT = self.ds.SelectMany(lambda event: {'pT': event.Jet_pt, 'eta': event.Jet_eta}.Zip()\n                                              .Where(lambda jet: abs(jet.eta) < 1)\n                                              .Select(lambda jet: jet.pT)).value()\n\n    def setup(self):\n        self.ds = UprootDataset('https://raw.githubusercontent.com/masonproffitt/func-adl-demo/master/Run2012B_SingleMu_10000.root', 'Events')", "name": "Q1_uproot.Q1Suite.peakmem_met_two_jets_under_1", "param_names": [], "params": [], "timeout": 3600, "type": "peakmemory", "unit": "bytes", "version": "bea77615c8600afae1497d231ab9196506c4977805d77489c2d76afa56c8e4e9"}, "Q1_uproot.Q1Suite.peakmem_opposite_charge_60_to_120_GeV": {"code": "class Q1Suite:\n    def peakmem_opposite_charge_60_to_120_GeV(self):\n        filtered_missing_ET_5 = self.ds.Where(lambda event: Zip({'p4': Zip({'pt':   event.Muon_pt,\n                                                               'eta':  event.Muon_eta,\n                                                               'phi':  event.Muon_phi,\n                                                               'mass': event.Muon_mass}).ToFourMomenta(),\n                                                    'charge': event.Muon_charge})\n                                               .Choose(2)\n                                               .Where(lambda pair: pair[0].charge * pair[1].charge < 0)\n                                               .Select(lambda pair: (pair[0].p4 + pair[1].p4).mass)\n                                               .Where(lambda mass: 60 < mass and mass < 120)\n                                               .Count() > 0\n                                ).Select(lambda event: event.MET_pt).value()\n\n    def setup(self):\n        self.ds = UprootDataset('https://raw.githubusercontent.com/masonproffitt/func-adl-demo/master/Run2012B_SingleMu_10000.root', 'Events')", "name": "Q1_uproot.Q1Suite.peakmem_opposite_charge_60_to_120_GeV", "param_names": [], "params": [], "timeout": 3600, "type": "peakmemory", "unit": "bytes", "version": "5876ac73b041542862e9363d103a10791c4c1ff19d551cbceeba11626509ac91"}, "Q1_uproot.Q1Suite.peakmem_pt_all_jets": {"code": "class Q1Suite:\n    def peakmem_pt_all_jets(self):\n        jet_pT = self.ds.SelectMany(lambda event: event.Jet_pt).value()\n\n    def setup(self):\n        self.ds = UprootDataset('https://raw.githubusercontent.com/masonproffitt/func-adl-demo/master/Run2012B_SingleMu_10000.root', 'Events')", "name": "Q1_uproot.Q1Suite.peakmem_pt_all_jets", "param_names": [], "params": [], "timeout": 3600, "type": "peakmemory", "unit": "bytes", "version": "65e5ea3867ef3fe0194abff777448ea6e165ba0f221fa6f77e4aa4e4791b01b2"}, "Q1_uproot.Q1Suite.peakmem_servicex_q1": {"code": "class Q1Suite:\n    def peakmem_servicex_q1(self):\n        missing_ET_query = self.ds.Select(lambda event: event.MET_pt).value()\n\n    def setup(self):\n        self.ds = UprootDataset('https://raw.githubusercontent.com/masonproffitt/func-adl-demo/master/Run2012B_SingleMu_10000.root', 'Events')", "name": "Q1_uproot.Q1Suite.peakmem_servicex_q1", "param_names": [], "params": [], "timeout": 3600, "type": "peakmemory", "unit": "bytes", "version": "5c25c31d3f066b5e79442fd63b933934ef037c65208e5b5e2aaf593d4a8600df"}, "Q1_uproot.Q1Suite.peakmem_trijet_four_momentum_over_3": {"code": "class Q1Suite:\n    def peakmem_trijet_four_momentum_over_3(self):\n        best_trijet_pt_6 = self.ds.Where(lambda event: event.nJet >= 3)\\\n                     .Select(lambda event: {'pt': event.Jet_pt,\n                                            'eta': event.Jet_eta,\n                                            'phi': event.Jet_phi,\n                                            'mass': event.Jet_mass}.Zip().ToFourMomenta()\n                                           .Choose(3)\n                                           .Select(lambda triplet: triplet[0] + triplet[1] + triplet[2])\n                                           .OrderBy(lambda trijet: abs(trijet.m - 172.5))\n                                           .First()\n                                           .Select(lambda best_trijet: best_trijet.pt)).value()\n\n    def setup(self):\n        self.ds = UprootDataset('https://raw.githubusercontent.com/masonproffitt/func-adl-demo/master/Run2012B_SingleMu_10000.root', 'Events')", "name": "Q1_uproot.Q1Suite.peakmem_trijet_four_momentum_over_3", "param_names": [], "params": [], "timeout": 3600, "type": "peakmemory", "unit": "bytes", "version": "b933cd0ecf5881b3839d9cdeef07fa50af1c7bc196f9736010d6c90519e16468"}, "Q1_uproot.Q1Suite.time_met_two_jets_over_40": {"code": "class Q1Suite:\n    def time_met_two_jets_over_40(self):\n        filtered_missing_ET_4 = self.ds.Where(lambda event: event.Jet_pt.Where(lambda pT: pT > 40).Count() >= 2)\\\n                          .Select(lambda event: event.MET_pt).value()\n\n    def setup(self):\n        self.ds = UprootDataset('https://raw.githubusercontent.com/masonproffitt/func-adl-demo/master/Run2012B_SingleMu_10000.root', 'Events')", "min_run_count": 2, "name": "Q1_uproot.Q1Suite.time_met_two_jets_over_40", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 3600, "type": "time", "unit": "seconds", "version": "9f0e56526054c6b505d276a14ba7846b5df4db977da895e269c4f8f651f7ec5e", "warmup_time": -1}, "Q1_uproot.Q1Suite.time_met_two_jets_under_1": {"code": "class Q1Suite:\n    def time_met_two_jets_under_1(self):\n        filtered_jet_pT = self.ds.SelectMany(lambda event: {'pT': event.Jet_pt, 'eta': event.Jet_eta}.Zip()\n                                              .Where(lambda jet: abs(jet.eta) < 1)\n                                              .Select(lambda jet: jet.pT)).value()\n\n    def setup(self):\n        self.ds = UprootDataset('https://raw.githubusercontent.com/masonproffitt/func-adl-demo/master/Run2012B_SingleMu_10000.root', 'Events')", "min_run_count": 2, "name": "Q1_uproot.Q1Suite.time_met_two_jets_under_1", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 3600, "type": "time", "unit": "seconds", "version": "904c966e2658f0ff551b6b51a4aa8783b97fbccc397c39ee2736310f9d9e4fe3", "warmup_time": -1}, "Q1_uproot.Q1Suite.time_opposite_charge_60_to_120_GeV": {"code": "class Q1Suite:\n    def time_opposite_charge_60_to_120_GeV(self):\n        filtered_missing_ET_5 = self.ds.Where(lambda event: Zip({'p4': Zip({'pt':   event.Muon_pt,\n                                                               'eta':  event.Muon_eta,\n                                                               'phi':  event.Muon_phi,\n                                                               'mass': event.Muon_mass}).ToFourMomenta(),\n                                                    'charge': event.Muon_charge})\n                                               .Choose(2)\n                                               .Where(lambda pair: pair[0].charge * pair[1].charge < 0)\n                                               .Select(lambda pair: (pair[0].p4 + pair[1].p4).mass)\n                                               .Where(lambda mass: 60 < mass and mass < 120)\n                                               .Count() > 0\n                                ).Select(lambda event: event.MET_pt).value()\n\n    def setup(self):\n        self.ds = UprootDataset('https://raw.githubusercontent.com/masonproffitt/func-adl-demo/master/Run2012B_SingleMu_10000.root', 'Events')", "min_run_count": 2, "name": "Q1_uproot.Q1Suite.time_opposite_charge_60_to_120_GeV", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 3600, "type": "time", "unit": "seconds", "version": "e7ba1ac3daa29b6a12de5caafed66cd80f9f374454abf6136e718a32b3707f7e", "warmup_time": -1}, "Q1_uproot.Q1Suite.time_pt_all_jets": {"code": "class Q1Suite:\n    def time_pt_all_jets(self):\n        jet_pT = self.ds.SelectMany(lambda event: event.Jet_pt).value()\n\n    def setup(self):\n        self.ds = UprootDataset('https://raw.githubusercontent.com/masonproffitt/func-adl-demo/master/Run2012B_SingleMu_10000.root', 'Events')", "min_run_count": 2, "name": "Q1_uproot.Q1Suite.time_pt_all_jets", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 3600, "type": "time", "unit": "seconds", "version": "21b5d28da915ab2409a9e22292fcb7cdf89358cee9ab96f24f9f3a7a91dae395", "warmup_time": -1}, "Q1_uproot.Q1Suite.time_servicex_q1": {"code": "class Q1Suite:\n    def time_servicex_q1(self):\n        missing_ET_query = self.ds.Select(lambda event: event.MET_pt).value()\n\n    def setup(self):\n        self.ds = UprootDataset('https://raw.githubusercontent.com/masonproffitt/func-adl-demo/master/Run2012B_SingleMu_10000.root', 'Events')", "min_run_count": 2, "name": "Q1_uproot.Q1Suite.time_servicex_q1", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 3600, "type": "time", "unit": "seconds", "version": "bf559619508bd73ddf56782af266365bc97cfc8d1d68fbb438a65072d8ccb848", "warmup_time": -1}, "Q1_uproot.Q1Suite.time_trijet_four_momentum_over_3": {"code": "class Q1Suite:\n    def time_trijet_four_momentum_over_3(self):\n        best_trijet_pt_6 = self.ds.Where(lambda event: event.nJet >= 3)\\\n                     .Select(lambda event: {'pt': event.Jet_pt,\n                                            'eta': event.Jet_eta,\n                                            'phi': event.Jet_phi,\n                                            'mass': event.Jet_mass}.Zip().ToFourMomenta()\n                                           .Choose(3)\n                                           .Select(lambda triplet: triplet[0] + triplet[1] + triplet[2])\n                                           .OrderBy(lambda trijet: abs(trijet.m - 172.5))\n                                           .First()\n                                           .Select(lambda best_trijet: best_trijet.pt)).value()\n\n    def setup(self):\n        self.ds = UprootDataset('https://raw.githubusercontent.com/masonproffitt/func-adl-demo/master/Run2012B_SingleMu_10000.root', 'Events')", "min_run_count": 2, "name": "Q1_uproot.Q1Suite.time_trijet_four_momentum_over_3", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 3600, "type": "time", "unit": "seconds", "version": "e12cdfb41781b55b7d419a1f00d7a59010f8e8be518081414237d4e51d64b77d", "warmup_time": -1}}, "machines": {"FlatIron": {"arch": "x86_64", "cpu": "Intel(R) Xeon(R) Gold 6348 CPU @ 2.60GHz", "machine": "FlatIron", "num_cpu": "112", "os": "Linux 4.18.0-358.el8.x86_64", "ram": "527526844", "version": 1}}, "tags": {"0.1": 20, "0.11": 61, "0.12": 74, "0.13": 110, "0.14": 148, "0.2": 23, "0.3": 25, "0.4": 27, "0.5": 31, "0.6": 35, "0.7": 39, "0.8": 48, "1.0": 144, "1.1": 157, "1.2": 162, "1.3": 171, "1.4": 182, "v1.5.0": 206, "v1.5.0-rc.0": 186, "v1.5.0-rc.1": 192, "v1.5.0-rc.2": 194, "v1.5.0-rc.3": 199, "v1.5.1": 211, "v1.6.0": 224, "v1.7.0": 229, "v1.8.0": 234, "v1.8.1": 236, "v1.8.2": 240, "v1.9.0": 254}, "pages": [["", "Grid view", "Display as a agrid"], ["summarylist", "List view", "Display as a list"], ["regressions", "Show regressions", "Display information about recent regressions"]]}